- name: Install Packages
  hosts: all
  become: true
  tasks:
  
    - name: Install utility packages
      apt:
        name: "{{ packages }}"
        state: present
      vars:
        packages:
            - apt-transport-https
            - ca-certificates        
            - curl
            - wget
            - gnupg-agent
            - software-properties-common            

- name: Container Runtime
  hosts: all
  become: true
  tasks:

    - name: Add signing key for Docker's repository
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add repository for Docker stable version
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable
        state: present

    - name: Install container runtime
      apt: 
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
            - containerd.io
            - docker-ce 
            - docker-ce-cli 

    - name: Patching docker/daemon.json
      copy:
        dest: "/etc/docker/daemon.json"
        content: |
            {
            "exec-opts": ["native.cgroupdriver=systemd"],
            "insecure-registries" : ["admin:5000"]
            }

    - name: Patching /etc/modules-load.d/containerd.conf
      copy:
        dest: "/etc/modules-load.d/containerd.conf"
        content: |
            overlay
            br_netfilter

    - name: Add the overlay module
      modprobe:
        name: overlay
        state: present

    - name: Add the br_netfilter module
      modprobe:
        name: br_netfilter
        state: present

    - name: Patching /etc/sysctl.d/99-kubernetes-cri.conf
      copy:
        dest: "/etc/sysctl.d/99-kubernetes-cri.conf"
        content: |
            net.bridge.bridge-nf-call-iptables  = 1
            net.ipv4.ip_forward                 = 1
            net.bridge.bridge-nf-call-ip6tables = 1

    - name: Apply sysctl params without reboot
      command: sysctl --system

    - name: Patching /etc/containerd/config.toml
      copy:
        dest: "/etc/containerd/config.toml"
        content: |
            [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
            [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
              SystemdCgroup = true
            
            version = 2

            [plugins."io.containerd.grpc.v1.cri".registry]
              config_path = "/etc/containerd/certs.d"

    - name: Create /etc/containerd/certs.d/admin.local directory
      file:
        path: /etc/containerd/certs.d/admin.local
        state: directory

    - name: Patching /etc/containerd/certs.d/admin.local/hosts.toml
      copy:
        dest: "/etc/containerd/certs.d/admin.local/hosts.toml"
        content: |
            [host."http://admin.local:5000"]
              capabilities = ["pull", "resolve", "push"]
              skip_verify = true

    - name: Restart containerd
      service:
        name: containerd
        state: restarted
        daemon_reload: yes

    - name: Add vagrant user to Docker group
      user:
        name: vagrant
        group: docker

    - name: Restart Docker
      service:
        name: docker
        state: restarted
        daemon_reload: yes

    - name: Remove swapfile from /etc/fstab
      mount:
        name: "{{ item }}"
        fstype: swap
        state: absent
      with_items:
        - swap
        - none
    
    - name: Disable swap
      command: swapoff -a

- name: Start Local Registry [optional]
  hosts: registries
  become: yes
  tasks:

    - name: Start a local registry
      command: docker run -d -p 5000:5000 --restart=always --name registry registry:2

    - name: Copy host's s3gw container image to local dir
      copy: src=../s3gw.tar dest=/home/vagrant mode=0777

    - name: Import s3gw container into local registry
      command: "{{ item }}"
      with_items:
        - docker load --input s3gw.tar
        - docker tag localhost/s3gw admin:5000/s3gw
        - docker push admin:5000/s3gw
        - docker image rm localhost/s3gw
        - docker image rm admin:5000/s3gw
        - rm -rf s3gw.tar

- name: Local DNS
  hosts: all
  gather_facts: yes
  tasks:

    - name: Update /etc/hosts file with node name
      tags: etchostsupdate
      become: yes
      become_user: root
      lineinfile:
        path: "/etc/hosts"
        regexp: ".*\t{{ hostvars[item]['ansible_fqdn']}}\t{{ hostvars[item]['ansible_hostname']}}"
        line: "{{ hostvars[item]['ansible_eth1'].ipv4.address }}\t{{ hostvars[item]['ansible_fqdn']}}\t{{ hostvars[item]['ansible_hostname']}}"
        state: present
        backup: yes
      register: etchostsupdate
      when: ansible_hostname != "{{ item }}" or ansible_hostname == "{{ item }}"
      with_items: "{{groups['all']}}"
    
    - name: Patch /etc/hosts 
      become: true
      shell: | 
        sed -i s/"127.0.2.1 {{ ansible_facts['fqdn']}} {{ ansible_facts['hostname']}}"/""/ /etc/hosts
